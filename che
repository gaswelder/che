#!/usr/bin/php
<?php
require 'src/lexer.php';
require 'src/token.php';
require 'src/package_file.php';
require 'src/parser.php';
require 'src/translator.php';
require 'src/resolver.php';
require 'src/cmd/build.php';
require 'src/cmd/deptree.php';
foreach (glob('src/nodes/*.php') as $path) {
    require $path;
}

function call_rust($f, $args = [])
{
    $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        // 2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
    );

    $proc = proc_open("cargo run -q", $descriptorspec, $pipes);
    fwrite($pipes[0], json_encode(["f" => $f, "a" => $args]) . "\n");
    fclose($pipes[0]);
    $s = stream_get_contents($pipes[1]);
    proc_terminate($proc);
    $data = json_decode($s, true);
    if ($data["error"] !== "") {
        throw new Exception($data["error"]);
    }
    return $data["data"];
}

$_call_rust_mem = [];
function call_rust_mem($f, $args = [])
{
    global $_call_rust_mem;
    $s = json_encode(["f" => $f, "a" => $args]);
    if (!array_key_exists($s, $_call_rust_mem)) {
        $_call_rust_mem[$s] = call_rust($f, $args);
    }
    return $_call_rust_mem[$s];
}

function indent($text, $tab = "\t")
{
    if (substr($text, -1) == "\n") {
        return indent(substr($text, 0, -1), $tab) . "\n";
    }
    return $tab . str_replace("\n", "\n$tab", $text);
}

exit(main($argv));

function main($argv)
{
    $commands = [
        'build' => 'cmd_build',
        'deptree' => 'cmd_deptree'
    ];
    array_shift($argv);
    if (empty($argv)) {
        echo "Usage: che <command>\n";
        foreach ($commands as $name => $func) {
            echo "\t$name\n";
        }
        return 1;
    }
    $cmd = array_shift($argv);
    if (!isset($commands[$cmd])) {
        echo "Unknown command: $cmd\n";
        return 1;
    }

    $func = $commands[$cmd];
    return $func($argv);
}
